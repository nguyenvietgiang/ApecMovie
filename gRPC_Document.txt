Cơ chế hoạt động của gRPC trong microservers

Lý thuyết tổng quan
gRPC trong microservices (trong dự án này giữa user services và email servies)
được sử dụng để giao tiếp giữa các services trong hệ thống

gRPC là framework RPC mã nguồn mở, hiện đại và hiệu năng cao mà có thể chạy trên bất kỳ môi trường nào. 
Framework này được Google khởi công phát triển vào năm 2015, đến 08/2016 thì được phát hành chính thức. 
Đây được cho là một thế hệ tiếp theo của RPC (Remote Procedure Calls) đặc biệt là trong mô hình Microservices.

Việc giao tiếp giữa các services khác nhau sử dụng Json
Giao tiếp sử dụng giao thức nhị phân: Một số giao thức truyền thông như gRPC, 
Protobuf sử dụng định dạng nhị phân thay vì JSON để trao đổi dữ liệu hiệu quả hơn, 
giảm thiểu overhead encode/decode.

Cách triển khai trong hệ thống Dotnet core Microservices và gRPC

B1: Triển khai gRPC core server trong hệ thống core 
+ Tạo một dự án gRPC server trong đó định nghĩa các dịch vụ và message trong file .proto (client và server sẽ dùng chung)
+ Tạo Connect đến file proto này ở các services sử dụng với 1 bên làm client và một bên làm server
B2: 
+ Triển khai services và khai báo trong server với file proto
+ Triển khai ở client để gọi và giao tiếp với server thông qua port https của server
+ Port của server sẽ được khai báo trong client (tham khảo trong file program.cs của UserServices gọi Email)

Lý thuyết chi tiết (tham khảo code ở gRPC server và các services sử dụng nó như UserServices và EmailServices)
+Trong gRPC, các số 1, 2, 3 xuất hiện ở các trường trong thông điệp (message) trong file .proto 
là số định danh trường (field numbers). Đây là các số nguyên dương duy nhất được sử dụng để xác định các
trường trong một thông điệp. Mỗi trường trong thông điệp phải có một số định danh duy nhất.

Các số định danh trường đóng vai trò quan trọng trong quá trình tuần tự hóa (serialization) 
và giải tuần tự hóa (deserialization) dữ liệu. Khi một thông điệp được tuần tự hóa để gửi qua mạng, 
các số định danh trường được sử dụng thay vì tên trường để giảm kích thước của dữ liệu và tăng tốc độ xử lý.
Khi thông điệp được giải tuần tự hóa tại phía nhận, các số định danh này được sử dụng để ánh xạ trở lại 
các trường tương ứng trong thông điệp.

tức là với sendmessage trong ví dụ của code hiện tại đang triển khai nó sẽ chuyển

{
  "to": "example@example.com",                        1: example@example.com
  "subject": "Hello",                      =====>     2: Hello
  "body": "This is a test email."                     3: This is a test email.
}

Điều này không chỉ giảm kích thước dữ liệu mà còn giúp gRPC xử lý các thông điệp nhanh hơn, 
do không phải làm việc với tên trường dài hơn và dễ gặp lỗi.